#!/bin/bash -x

min_mapq=30
min_baseq=30
# only consider read pairs mapped in a properly-paired manner
sam_flag="0x2"

# command-line argument: 
# dataset_1 dataset_2 directory_where_bam_are
dataset_1=$1
dataset_2=$2
sam_dir=$3

genome_fa="/home/abrehm/GWAS2/new_seq/results/trimmed_fastq/grenedalf/bin/combined_D_mel_fun_genome.fasta.gz"

# construct path to the 2 sam files
sam_path="/home/abrehm/GWAS2/new_seq/results/trimmed_fastq/${dataset_1}.bam"
sam_path="${sam_path} /home/abrehm/GWAS2/new_seq/results/trimmed_fastq/${dataset_2}.bam"
#sam_path="${sam_dir}/${dataset_1}.bam"
#sam_path="$sam_path ${sam_dir}/${dataset_2}.bam"

comparison="${dataset_1}_${dataset_2}"
 
prefix=grenedalf.frequency.${comparison}.

# Run grenedalf frequency
./grenedalf frequency \
  --sam-path $sam_path \
  --allow-file-overwriting \
  --sam-min-map-qual $min_mapq \
  --sam-min-base-qual $min_baseq \
  --sam-flags-include-any $sam_flag \
  --reference-genome-fasta $genome_fa \
  --file-prefix $prefix \
  --threads 16 \
  --log-file ${prefix}.log \
  --write-sample-counts 







#      
#                                                       ,--;                           
#                                                       \  \          ----.            
#          ,-----.           ,----.;---.  ,--.  ,----.   \  \   ---.   |  |    ;-.----.
#         /  ---./ ;-,----. / .---'|  , `.|  | / .---' ,--'  \   \  \  |  |    | .---' 
#        |  ( .---.|  ´` .'|  `--  |  |`  `  ||  `--  / .--.  )/ .-. \ |  |    | `--,  
#         \  --'  ||  |\  \ \ `---.|  |  \   | \ `---.\ `--' //  `-'  \|  '---.| |`    
#          `----´ '`--' '--' `----'`--'   `--:  `----' `----' `------'.`------'| |     
#                                                                              | |     
#             ========================================================////-    ,-'     
#             v0.6.1 (c) 2020-2024 by Lucas Czech
#      
#      Invocation:                        ./grenedalf frequency
#      Command:                           grenedalf frequency
#      

#       Create a table with per-sample and/or total base counts and/or frequencies at positions in the genome.
#       Usage: grenedalf frequency [OPTIONS]
#       
#       Input SAM/BAM/CRAM:
#         --sam-path TEXT:PATH(existing)=[] ...
#                                     List of sam/bam/cram files or directories to process. For directories, only files with the extension `.sam[.gz]|.bam|.cram` are processed. To input more than one file or directory, either separate them with spaces, or provide this option multiple times.
#         --sam-min-map-qual UINT:UINT in [0 - 90]=0 Needs: --sam-path
#                                     Minimum phred-scaled mapping quality score [0-90] for a read in sam/bam/cram files to be considered. Any read that is below the given value of mapping quality will be completely discarded, and its bases not taken into account. Default is 0, meaning no filtering by base quality.
#         --sam-min-base-qual UINT:UINT in [0 - 90]=0 Needs: --sam-path
#                                     Minimum phred-scaled quality score [0-90] for a base in sam/bam/cram files to be considered. Bases below this are ignored when computing allele frequencies. Default is 0, meaning no filtering by base quality.
#         --sam-split-by-rg Needs: --sam-path
#                                     Instead of considering the whole sam/bam/cram file as one large colletion of reads, use the `@RG` read group tag to split reads. Each read group is then considered a sample. Reads with an invalid (not in the header) read group tag or without a tag are ignored.
#         --sam-flags-include-all TEXT Needs: --sam-path
#                                     Only use reads with all bits in the given value present in the FLAG field of the read. This is equivalent to the `-f` / `--require-flags` setting in `samtools view`, and uses the same flag names and their corresponding binary values. The value can be specified in hex by beginning with `0x` (i.e., `/^0x[0-9A-F]+/`), in octal by beginning with `0` (i.e., `/^0[0-7]+/`), as a decimal number not beginning with '0', or as a comma-, plus-, space-, or vertiacal-bar-separated list of flag names as specified by samtools. We are more lenient in parsing flag names than `samtools`, and allow different capitalization and delimiteres such as dashes and underscores in the flag names as well.
#         --sam-flags-include-any TEXT Needs: --sam-path
#                                     Only use reads with any bits set in the given value present in the FLAG field of the read. This is equivalent to the `--rf` / `--incl-flags` / `--include-flags` setting in `samtools view`. See `--sam-flags-include-all` above for how to specify the value.
#         --sam-flags-exclude-all TEXT Needs: --sam-path
#                                     Do not use reads with all bits set in the given value present in the FLAG field of the read. This is equivalent to the `-G` setting in `samtools view`. See `--sam-flags-include-all` above for how to specify the value.
#         --sam-flags-exclude-any TEXT Needs: --sam-path
#                                     Do not use reads with any bits set in the given value present in the FLAG field of the read. This is equivalent to the `-F` / `--excl-flags` / `--exclude-flags` setting in `samtools view`. See `--sam-flags-include-all` above for how to specify the value.
#       
#       
#       Input (m)pileup:
#         --pileup-path TEXT:PATH(existing)=[] ...
#                                     List of (m)pileup files or directories to process. For directories, only files with the extension `.(plp|mplp|pileup|mpileup)[.gz]` are processed. To input more than one file or directory, either separate them with spaces, or provide this option multiple times.
#         --pileup-min-base-qual UINT:UINT in [0 - 90]=0 Needs: --pileup-path
#                                     Minimum phred quality score [0-90] for a base in (m)pileup files to be considered. Bases below this are ignored when computing allele frequencies. Default is 0, meaning no filtering by phred quality score.
#         --pileup-quality-encoding TEXT:{sanger,illumina-1.3,illumina-1.5,illumina-1.8,solexa}=sanger Needs: --pileup-path
#                                     Encoding of the quality scores of the bases in (m)pileup files, when using `--pileup-min-base-qual`. Default is `"sanger"`, which seems to be the most common these days. Both `"sanger"` and `"illumina-1.8"` are identical and use an ASCII offset of 33, while `"illumina-1.3"` and `"illumina-1.5"` are identical with an ASCII offset of 64 (we provide different names for completeness). Lastly, `"solexa"` has an offset of 64, but uses a different equation (not phred score) for the encoding.
#       
#       
#       Input sync:
#         --sync-path TEXT:PATH(existing)=[] ...
#                                     List of sync (as specified by PoPoolation2) files or directories to process. For directories, only files with the extension `.sync[.gz]` are processed. To input more than one file or directory, either separate them with spaces, or provide this option multiple times.
#       
#       
#       Input VCF/BCF:
#         --vcf-path TEXT:PATH(existing)=[] ...
#                                     List of vcf/bcf files or directories to process. For directories, only files with the extension `.vcf[.gz]|.bcf` are processed. To input more than one file or directory, either separate them with spaces, or provide this option multiple times. This expects that the input file has the per-sample VCF FORMAT field `AD` (alleleic depth) given, containing the counts of the reference and alternative base. This assumes that the data that was used to create the VCF file was actually a pool of individuals (e.g., from pool sequencing) for each sample (column) of the VCF file. We then interpret the `AD` field as the allele counts of each pool of individuals. Note that only SNP positions are used; positions that contain indels and other non-SNP variants are skipped.
#       
#       
#       Input frequency table:
#         --frequency-table-path TEXT:PATH(existing)=[] ...
#                                     List of frequency table files or directories to process. For directories, only files with the extension `.(csv|tsv)[.gz]` are processed. To input more than one file or directory, either separate them with spaces, or provide this option multiple times.
#         --frequency-table-separator-char TEXT:{comma,tab,space,semicolon}=comma Needs: --frequency-table-path
#                                     Separator char between fields of the frequency table input.
#         --frequency-table-missing-value TEXT Needs: --frequency-table-path
#                                     Marker for denoting missing values in the table. By default, we use `.`, `nan`, and `na`.
#         --frequency-table-depth-factor FLOAT:POSITIVE=0 Needs: --frequency-table-path
#                                     For frequency table input that only contains allele frequencies, without any information on read depth, we need to transform those frequencies into counts for our internal processing. This number is multiplied by the frequency to obtain these pseudo-counts. By default, we use 1000000, to get a reasonable interger approximation of the floating point frequency. This is of course above any typical read depth, but allows for more accurate counts when using for instance haplotype-corrected frequencies such as those from HAF-pipe.
#         --frequency-table-freq-is-ref Needs: --frequency-table-path
#                                     For frequency table input that contains allele frequencies, we need to decide whether those frequencies represent the reference or the alternative allele. By default, we assume the latter, i.e., values are interpreted as alternative allele frequencies. Use this flag to instead interpret them as reference allele frequencies.
#         --frequency-table-chr-column TEXT Needs: --frequency-table-path
#                                     Specify the name of the chromosome column in the header, case sensitive. By default, we look for columns named "chromosome", "chrom", "chr", or "contig", case insensitive.
#         --frequency-table-pos-column TEXT Needs: --frequency-table-path
#                                     Specify the name of the position column in the header, case sensitive. By default, we look for columns named "position" or "pos", case insensitive.
#         --frequency-table-ref-base-column TEXT Needs: --frequency-table-path
#                                     Specify the name of the reference base column in the header, case sensitive. By default, we look for columns named "reference", "referencebase", "ref", or "refbase", case insensitive, and ignoring any extra punctuation marks.
#         --frequency-table-alt-base-column TEXT Needs: --frequency-table-path
#                                     Specify the name of the alternative base column in the header, case sensitive. By default, we look for columns named "alternative", "alternativebase", "alt", or "altbase", case insensitive, and ignoring any extra punctuation marks.
#         --frequency-table-sample-ref-count-column TEXT Needs: --frequency-table-path
#                                     Specify the exact prefix or suffix of the per-sample reference count columns in the header, case sensitive. By default, we look leniently for column names that combine any of "reference", "referencebase", "ref", or "refbase" with any of "counts", "count", "cnt", or "ct", case insensitive, and ignoring any extra punctuation marks, as a prefix or suffix, with the remainder of the column name used as the sample name. For example, "S1.ref_cnt" indicates the reference count column for sample "S1".
#         --frequency-table-sample-alt-count-column TEXT Needs: --frequency-table-path
#                                     Specify the exact prefix or suffix of the per-sample alternative count columns in the header, case sensitive. By default, we look leniently for column names that combine any of "alternative", "alternativebase", "alt", or "altbase" with any of "counts", "count", "cnt", or "ct", case insensitive, and ignoring any extra punctuation marks, as a prefix or suffix, with the remainder of the column name used as the sample name. For example, "S1.alt_cnt" indicates the alternative count column for sample "S1".
#         --frequency-table-sample-freq-column TEXT Needs: --frequency-table-path
#                                     Specify the exact prefix or suffix of the per-sample frequency columns in the header, case sensitive. By default, we look for column names having "frequency", "freq", "maf", "af", or "allelefrequency", case insensitive, and ignoring any extra punctuation marks, as a prefix or suffix, with the remainder of the column name used as the sample name. For example, "S1.freq" indicates the frequency column for sample "S1". Note that when the input data contains frequencies, but no reference or alternative base columns, such as HAF-pipe output tables, we cannot know the bases, and will hence guess. To properly set the reference bases, consider providing the `--reference-genome-fasta` option.
#         --frequency-table-sample-depth-column TEXT Needs: --frequency-table-path
#                                     Specify the exact prefix or suffix of the per-sample read depth columns in the header, case sensitive. By default, we look for column names having "readdepth", "depth", "coverage", "cov", or "ad", case insensitive, and ignoring any extra punctuation marks, as a prefix or suffix, with the remainder of the column name used as the sample name. For example, "S1.read-depth" indicates the read depth column for sample "S1".
#       
#       
#       Input Settings:
#         --multi-file-locus-set TEXT:{union,intersection}=union
#                                     When multiple input files are provided, select whether the union of all their loci is used (outer join), or their intersection (inner join). For their union, input files that do not have data at a particular locus are considered as missing at that locus. Note that we allow to use multiple input files even with different file types.
#         --make-gapless              By default, we only operate on the positions for which there is data. In particular, positions that are absent in the input are completely ignored; they do not even show up in the `missing` column of output tables. This is because for the statistics, data being absend or (marked as) missing is merely a sementic distinction, but it does not change the results. However, it might make processing with downstream tools easier if the output contains all positions, for instance when using `single` windows. With this option, all absent positions are filled in as missing data, so that they show up in the `missing` column and as entries in single windows. If a referene genome or dictionary is given, this might also include positions beyond where there is input data, up until the length of each chromosome. Note that this can lead to large ouput tables when processing single positions.
#         --reference-genome-fasta TEXT:FILE Excludes: --reference-genome-dict --reference-genome-fai
#                                     Provide a reference genome in `.fasta[.gz]` format. This allows to correctly assign the reference bases in file formats that do not store them, and serves as an integrity check in those that do. It further is used as a sequence dictionary to determine the chromosome order and length, on behalf of a dict or fai file.
#         --reference-genome-dict TEXT:FILE Excludes: --reference-genome-fasta --reference-genome-fai
#                                     Provide a reference genome sequence dictionary in `.dict` format. It is used to determine the chromosome order and length, without having to provide the full reference genome.
#         --reference-genome-fai TEXT:FILE Excludes: --reference-genome-fasta --reference-genome-dict
#                                     Provide a reference genome sequence dictionary in `.fai` format. It is used to determine the chromosome order and length, without having to provide the full reference genome.
#       
#       
#       Sample Names, Groups, and Filters:
#         --rename-samples-list TEXT:FILE
#                                     Allows to rename samples, by providing a file that lists the old and new sample names, one per line, separating old and new names by a tab.
#                                     By default, we use sample names as provided in the input files. Some file types however do not contain sample names, such as (m)pileup or sync files (unless the non-standard sync header line is provided). For such file types, sample names are automatically assigned by using their input file base name (without path and extension), followed by a dot and numbers 1..n for all samples in that file. For instance, samples in `/path/to/sample.sync` are named `sample.1`, `sample.2`, etc.
#                                     Using this option, those names can be renamed as needed. Use verbose output (`--verbose`) to show a list of all sample names. We then use these names in the output as well as in the `--filter-samples-include` and `--filter-samples-exclude` options.
#         --filter-samples-include TEXT Excludes: --filter-samples-exclude
#                                     Sample names to include (all other samples are excluded); either (1) a comma- or tab-separated list given on the command line (in a typical shell, this list has to be enclosed in quotation marks), or (2) a file with one sample name per line. If no sample filter is provided, all samples in the input file are used. The option is applied after potentially renaming the samples with `--rename-samples-list`.
#         --filter-samples-exclude TEXT Excludes: --filter-samples-include
#                                     Sample names to exclude (all other samples are included); either (1) a comma- or tab-separated list given on the command line (in a typical shell, this list has to be enclosed in quotation marks), or (2) a file with one sample name per line. If no sample filter is provided, all samples in the input file are used. The option is applied after potentially renaming the samples with `--rename-samples-list`.
#         --sample-group-merge-table TEXT:FILE
#                                     When the input contains multiple samples (either within a single input file, or by providing multiple input files), these can be grouped into new samples, by summing up their nucleotide base counts at each position. This has essentially the same effect as having merged the raw fastq files or the mapped sam/bam files of the samples, that is, all reads from those samples are treated as if they were a single sample. For this grouping, the option takes a simple table file (comma- or tab-separated), with the sample names (after the above renaming, if provided) in the first column, and their assigned group names in the second column. All samples in the same group are then merged into a grouped sample, and the group names are used as the new sample names for the output. Note that the `--pool-sizes` option then need to contain the summed up pool sizes for each group, using the group names.
#       
#       
#       Region Filters:
#         --filter-region TEXT=[] ... Genomic region to filter for, in the format "chr" (for whole chromosomes), "chr:position", "chr:start-end", or "chr:start..end". Positions are 1-based and inclusive (closed intervals). The filter keeps all listed positions, and removes all that are not listed. Multiple region options can be provided, see also `--filter-region-set`.
#         --filter-region-list TEXT:FILE=[] ...
#                                     Genomic regions to filter for, as a file with one region per line, either in the format "chr" (for whole chromosomes), "chr:position", "chr:start-end", "chr:start..end", or tab- or space-delimited "chr position" or "chr start end". Positions are 1-based and inclusive (closed intervals). The filter keeps all listed positions, and removes all that are not listed. Multiple region options can be provided, see also `--filter-region-set`.
#         --filter-region-bed TEXT:FILE=[] ...
#                                     Genomic regions to filter for, as a BED file. This only uses the chromosome, as well as start and end information per line, and ignores everything else in the file. Note that BED uses 0-based positions, and a half-open `[)` interval for the end position; simply using columns extracted from other file formats (such as vcf or gff) will not work. The filter keeps all listed positions, and removes all that are not listed.
#         --filter-region-gff TEXT:FILE=[] ...
#                                     Genomic regions to filter for, as a GFF2/GFF3/GTF file. This only uses the chromosome, as well as start and end information per line, and ignores everything else in the file. The filter keeps all listed positions, and removes all that are not listed.
#         --filter-region-map-bim TEXT:FILE=[] ...
#                                     Genomic positions to filter for, as a MAP or BIM file as used in PLINK. This only uses the chromosome and coordinate per line, and ignores everything else in the file. The filter keeps all listed positions, and removes all that are not listed.
#         --filter-region-vcf TEXT:FILE=[] ...
#                                     Genomic positions to filter for, as a VCF/BCF file (such as a known-variants file). This only uses the chromosome and position per line, and ignores everything else in the file. The filter keeps all listed positions, and removes all that are not listed.
#         --filter-region-fasta TEXT:FILE=[] ...
#                                     Genomic positions to filter for, as a FASTA-like mask file (such as used by vcftools). The file contains a sequence of integer digits `[0-9]`, one for each position on the chromosomes, which specify if the position should be filtered out or not. Any positions with digits above the `--filter-region-fasta-min` value are removed. Note that this conceptually differs from a mask file, and merely uses the same format.
#         --filter-region-fasta-min UINT:INT in [0 - 9]=0 Needs: --filter-region-fasta
#                                     When using `--filter-region-mask-fasta`, set the cutoff threshold for the filtered digits. Only positions with that value or lower will be kept. The default is 0, meaning that all positions with digits greater than 0 will be removed.
#         --filter-region-fasta-invert :INT in [0 - 9] Needs: --filter-region-fasta
#                                     When using `--filter-region-mask-fasta`, invert the mask. This option has the same effect as the equivalent in vcftools, but instead of specifying the file, this here is a flag. When it is set, the mask specified above is inverted.
#         --filter-region-set TEXT:{union,intersection}=union
#                                     It is possible to provide multiple of the above region filter options, even of different types. In that case, decide on how to combine the loci of these filters.
#       
#       
#       Masking Filters:
#         --filter-mask-samples-bed-list TEXT:FILE Excludes: --filter-mask-samples-fasta-list
#                                     For each sample, genomic positions to mask (mark as missing), as a set of BED files.
#                                     See the below `--filter-mask-total-bed` for details. Here, individual BED files can be provided for each sample, for fine-grained control over the masking. The option takes a path to a file that contains a comma- or tab-separated list of sample names and BED file paths, with one name/path pair per line, in any order of lines.
#         --filter-mask-samples-bed-invert Needs: --filter-mask-samples-bed-list
#                                     When using `--filter-mask-samples-bed-list`, set this flag to invert the specified mask. Needs one of `--reference-genome-fasta`, `--reference-genome-dict`, `--reference-genome-fai` to determine chromosome lengths.
#         --filter-mask-samples-fasta-list TEXT:FILE Excludes: --filter-mask-samples-bed-list
#                                     For each sample, genomic positions to mask, as a FASTA-like mask file.
#                                     See the below `--filter-mask-total-fasta` for details. Here, individual FASTA files can be provided for each sample, for fine-grained control over the masking. The option takes a path to a file that contains a comma- or tab-separated list of sample names and FASTA file paths, with one name/path pair per line, in any order of lines.
#         --filter-mask-samples-fasta-min UINT:INT in [0 - 9]=0 Needs: --filter-mask-samples-fasta-list
#                                     When using `--filter-mask-samples-fasta-list`, set the cutoff threshold for the masked digits. All positions above that value are masked. The default is 0, meaning that only exactly the positons with value 0 will not be masked.
#         --filter-mask-samples-fasta-invert Needs: --filter-mask-samples-fasta-list
#                                     When using `--filter-mask-samples-fasta-list`, invert the mask. When this flag is set, the mask specified above is inverted.
#         --filter-mask-total-bed TEXT:FILE Excludes: --filter-mask-total-fasta
#                                     Genomic positions to mask (mark as missing), as a BED file.
#                                     The regions listed in the BED file are masked; this is in line with, e.g., smcpp, but is the inverse of the above usage of a BED file for selection regions, where instead the listed regions are kept. Note that this also conceptually differs from the region BED above. We here do not remove the masked positions, but instead just mark them as masked, so that they can still contribute to, e.g., denominators in the statistics for certain settings.
#                                     This only uses the chromosome, as well as start and end information per line, and ignores everything else in the file. Note that BED uses 0-based positions, and a half-open `[)` interval for the end position; simply using columns extracted from other file formats (such as vcf or gff) will not work.
#         --filter-mask-total-bed-invert Needs: --filter-mask-total-bed
#                                     When using `--filter-mask-total-bed`, set this flag to invert the specified mask. Needs one of `--reference-genome-fasta`, `--reference-genome-dict`, `--reference-genome-fai` to determine chromosome lengths.
#         --filter-mask-total-fasta TEXT:FILE Excludes: --filter-mask-total-bed
#                                     Genomic positions to mask, as a FASTA-like mask file (such as used by vcftools).
#                                     The file contains a sequence of integer digits `[0-9]`, one for each position on the chromosomes, which specify if the position should be masked or not. Any positions with digits above the `--filter-mask-total-fasta-min` value are tagged as being masked. Note that this conceptually differs from the region fasta above. We here do not remove the the masked positions, but instead just mark them as masked, so that they can still contribute to, e.g., denominators in the statistics for certain settings.
#         --filter-mask-total-fasta-min UINT:INT in [0 - 9]=0 Needs: --filter-mask-total-fasta
#                                     When using `--filter-mask-total-fasta`, set the cutoff threshold for the masked digits. All positions above that value are masked. The default is 0, meaning that only exactly the positons with value 0 will not be masked.
#         --filter-mask-total-fasta-invert Needs: --filter-mask-total-fasta
#                                     When using `--filter-mask-total-fasta`, invert the mask. This option has the same effect as the equivalent in vcftools, but instead of specifying the file, this here is a flag. When it is set, the mask specified above is inverted.
#       
#       
#       Settings:
#         --write-sample-counts       If set, write 'REF_CNT' and 'ALT_CNT' columns per sample, containing the REF and ALT base counts at the position for each sample.
#         --write-sample-read-depth   If set, write a 'DEPTH' column per sample, containing the read depth (sum of REF and ALT) counts of each sample.
#         --write-sample-ref-freq Excludes: --write-sample-alt-freq
#                                     If set, write a 'FREQ' column per sample, containing the reference allele frequency, computed as REF/(REF+ALT) of the counts of each sample.
#         --write-sample-alt-freq Excludes: --write-sample-ref-freq
#                                     If set, write a 'FREQ' column per sample, containing the alternative allele frequency, computed as ALT/(REF+ALT) of the counts of each sample.
#         --write-total-counts        If set, write the 'REF_CNT' and 'ALT_CNT' columns for the total, which contain the REF and ALT base counts at the position across all samples.
#         --write-total-read-depth    If set, write the 'DEPTH' column for the total, containing the read_depth (sum of REF and ALT) counts across all samples.
#         --write-total-frequency     If set, write the 'FREQ' column for the total, containing the frequency, computed as REF/(REF+ALT) of the counts across all samples.
#         --write-invariants          If set, write rows that have no alternative (ALT) counts. By default, we omit these positions, which is useful to keep the output small. For example sam/bam/cream or (m)pileup files otherwise produce an output row for each position in the input.
#         --omit-ref-and-alt-bases Excludes: --omit-alt-bases
#                                     If set, do not write the columns containing the reference and alternative bases. This can be useful when the input is obtained from a source that does not contain those anyway. In that case, we internally assign them to 'A' and 'G', respectively, which usually is not correct, and hence should be omitted from the output.
#         --omit-alt-bases Excludes: --omit-ref-and-alt-bases
#                                     If set, do not write the column containing the alternative bases. This can be useful when the input is obtained from a source that does not contain them anyway. In that case, we internally assign the alternative base to be the transition base of the reference ('A' <-> 'G' and 'C' <-> 'T'), which usually is not correct, and hence should be omitted from the output. Note: To at least set the reference bases, consider providing the `--reference-genome-fasta` option.
#       
#       
#       Formatting:
#         --separator-char TEXT:{comma,tab,space,semicolon}=comma
#                                     Separator char between fields of output tabular data.
#         --na-entry TEXT=nan         Set the text to use in the output for n/a and NaN entries (e.g., resulting from positions with no counts, or windows with no variants). This is useful to match formatting expectations of downstream software.
#       
#       
#       Output:
#         --out-dir TEXT=.            Directory to write files to
#         --file-prefix TEXT          File prefix for output files. Most grenedalf commands use the command name as the base name for file output. This option amends the base name, to distinguish runs with different data.
#         --file-suffix TEXT          File suffix for output files. Most grenedalf commands use the command name as the base name for file output. This option amends the base name, to distinguish runs with different data.
#         --compress                  If set, compress the output files using gzip. Output file extensions are automatically extended by `.gz`.
#       
#       
#       Global Options:
#         --allow-file-overwriting    Allow to overwrite existing output files instead of aborting the command. By default, we abort if any output file already exists, to avoid overwriting by mistake.
#         --verbose                   Produce more verbose output.
#         --threads UINT=64           Number of threads to use for calculations. If not set, we guess a reasonable number of threads, by looking at the environmental variables (1) `OMP_NUM_THREADS` (OpenMP) and (2) `SLURM_CPUS_PER_TASK` (slurm), as well as (3) the hardware concurrency (number of CPU cores), taking hyperthreads into account, in the given order of precedence.
#         --log-file TEXT             Write all output to a log file, in addition to standard output to the terminal.
#         --help                      Print this help message and exit.
#       
#       
#       grenedalf: population genetic statistics for the next generation of pool sequencing

#      Input SAM/BAM/CRAM:
#        --sam-path                       []
#        --sam-min-map-qual               0
#        --sam-min-base-qual              0
#        --sam-split-by-rg                
#        --sam-flags-include-all          
#        --sam-flags-include-any          
#        --sam-flags-exclude-all          
#        --sam-flags-exclude-any
#      
#      Input (m)pileup:
#        --pileup-path                    []
#        --pileup-min-base-qual           0
#        --pileup-quality-encoding        sanger
#      
#      Input sync:
#        --sync-path                      []
#      
#      Input VCF/BCF:
#        --vcf-path                       []
#      
#      Input frequency table:
#        --frequency-table-path           []
#        --frequency-table-separator-char comma
#        --frequency-table-missing-value  
#        --frequency-table-depth-factor   0
#        --frequency-table-freq-is-ref    
#        --frequency-table-chr-column     
#        --frequency-table-pos-column     
#        --frequency-table-ref-base-column
#        --frequency-table-alt-base-column
#        --frequency-table-sample-ref-count-column
#        --frequency-table-sample-alt-count-column
#        --frequency-table-sample-freq-column
#        --frequency-table-sample-depth-column
#      
#      Input Settings:
#        --multi-file-locus-set           union
#        --make-gapless                   
#        --reference-genome-fasta         
#        --reference-genome-dict          
#        --reference-genome-fai
#      
#      Sample Names, Groups, and Filters:
#        --rename-samples-list            
#        --filter-samples-include         
#        --filter-samples-exclude         
#        --sample-group-merge-table
#      
#      Region Filters:
#        --filter-region                  []
#        --filter-region-list             []
#        --filter-region-bed              []
#        --filter-region-gff              []
#        --filter-region-map-bim          []
#        --filter-region-vcf              []
#        --filter-region-fasta            []
#        --filter-region-fasta-min        0
#        --filter-region-fasta-invert     
#        --filter-region-set              union
#      
#      Masking Filters:
#        --filter-mask-samples-bed-list   
#        --filter-mask-samples-bed-invert 
#        --filter-mask-samples-fasta-list 
#        --filter-mask-samples-fasta-min  0
#        --filter-mask-samples-fasta-invert
#        --filter-mask-total-bed          
#        --filter-mask-total-bed-invert   
#        --filter-mask-total-fasta        
#        --filter-mask-total-fasta-min    0
#        --filter-mask-total-fasta-invert
#      
#      Settings:
#        --write-sample-counts            
#        --write-sample-read-depth        
#        --write-sample-ref-freq          
#        --write-sample-alt-freq          
#        --write-total-counts             
#        --write-total-read-depth         
#        --write-total-frequency          
#        --write-invariants               
#        --omit-ref-and-alt-bases         
#        --omit-alt-bases
#      
#      Formatting:
#        --separator-char                 comma
#        --na-entry                       nan
#      
#      Output:
#        --out-dir                        .
#        --file-prefix                    
#        --file-suffix                    
#        --compress
#      
#      Global Options:
#        --allow-file-overwriting         
#        --verbose                        
#        --threads                        64
#        --log-file
#      
#      Run the following command to get the references that need to be cited:
#      `grenedalf citation Czech2023-grenedalf`
#      
#      Started 2025-01-10 11:21:28
#      
#      
